{"version":3,"sources":["webpack:///./src/templates/tag/page.js"],"names":["data","pageContext","tag","posts","pick","map","x","node","header","list","slice","title","name","className","query","matches","fluid","description","links","link","key","url","to","icon","post","id"],"mappings":"iSAce,sBAA4B,IAAzBA,EAAwB,EAAxBA,KAAMC,EAAkB,EAAlBA,YACdC,EAAQF,EAARE,IACFC,EAAQC,YAAKJ,EAAM,eAAeK,KAAI,SAAAC,GAAC,OAAIA,EAAEC,SAAS,GACtDC,EAASL,EAAM,GACfM,EAAON,EAAMO,MAAM,GAEzB,OACE,kBAAC,IAAD,CAAQC,MAAOT,EAAIU,KAAMC,UAAU,YACjC,yBAAKA,UAAU,qBACb,yBAAKA,UAAU,mBACb,kBAAC,IAAD,CAAOC,MAAM,uBACV,SAAAC,GAAO,OACNA,GACE,yBAAKF,UAAU,qBACb,kBAAC,IAAD,CACEA,UAAU,iBACVG,MAAOZ,YAAKF,EAAK,iCAEnB,yBAAKW,UAAU,mBAAmBX,EAAIU,MACtC,yBAAKC,UAAU,kBAAkBX,EAAIe,aACrC,yBAAKJ,UAAU,oBACXX,EAAIgB,OAAS,IAAIb,KAAI,SAAAc,GAAI,OACzB,kBAAC,IAAD,CACEN,UAAU,iBACVO,IAAKD,EAAKE,IACVC,GAAIH,EAAKE,KAET,kBAAC,IAAD,CAAME,KAAMJ,EAAKI,gBAQ/B,yBAAKV,UAAU,yBACZV,EAAM,IAAM,kBAAC,IAAD,CAASqB,KAAMhB,KAE9B,yBAAKK,UAAU,uBACZJ,EAAKJ,KAAI,SAAAmB,GAAI,OACZ,kBAAC,IAAD,CAAWJ,IAAKI,EAAKC,GAAID,KAAMA,QAGnC,kBAAC,IAAevB,IAElB,kBAAC,IAAD,CAAOa,MAAM,uBACV,SAAAC,GAAO,OACLA,GACC,yBAAKF,UAAU,qBACb,kBAAC,IAAD,CACEA,UAAU,iBACVG,MAAOZ,YAAKF,EAAK,iCAEnB,yBAAKW,UAAU,mBAAmBX,EAAIU,MACtC,yBAAKC,UAAU,kBAAkBX,EAAIe,aACrC,yBAAKJ,UAAU,oBACXX,EAAIgB,OAAS,IAAIb,KAAI,SAAAc,GAAI,OACzB,kBAAC,IAAD,CACEN,UAAU,iBACVO,IAAKD,EAAKE,IACVC,GAAIH,EAAKE,KAET,kBAAC,IAAD,CAAME,KAAMJ,EAAKI,mBAahC,IAAMT,EAAK","file":"component---src-templates-tag-page-js-5fb277362faa5e115bf6.js","sourcesContent":["import React from 'react';\nimport Media from 'react-media';\nimport { graphql } from 'gatsby';\nimport Img from 'gatsby-image';\nimport pick from 'utils/pick';\n\nimport { Icon } from 'components/common';\nimport Link from 'components/Link';\nimport Layout from 'components/Layout';\nimport Pagination from 'components/Pagination';\nimport { PostBig, PostSmall } from 'components/Post';\n\nimport './style.less';\n\nexport default ({ data, pageContext }) => {\n  const { tag } = data;\n  const posts = pick(data, 'posts.edges').map(x => x.node) || [];\n  const header = posts[0];\n  const list = posts.slice(1);\n\n  return (\n    <Layout title={tag.name} className=\"tag-page\">\n      <div className=\"tag-page__content\">\n        <div className=\"tag-page__posts\">\n          <Media query=\"(max-width: 768px)\">\n            {matches =>\n              matches && (\n                <div className=\"tag-page__section\">\n                  <Img\n                    className=\"tag-page__logo\"\n                    fluid={pick(tag, 'cover.childImageSharp.fluid')}\n                  />\n                  <div className=\"tag-page__title\">{tag.name}</div>\n                  <div className=\"tag-page__desc\">{tag.description}</div>\n                  <div className=\"tag-page__links\">\n                    {(tag.links || []).map(link => (\n                      <Link\n                        className=\"tag-page__link\"\n                        key={link.url}\n                        to={link.url}\n                      >\n                        <Icon icon={link.icon} />\n                      </Link>\n                    ))}\n                  </div>\n                </div>\n              )\n            }\n          </Media>\n          <div className=\"tag-page__header-post\">\n            {posts[0] && <PostBig post={header} />}\n          </div>\n          <div className=\"tag-page__post-list\">\n            {list.map(post => (\n              <PostSmall key={post.id} post={post} />\n            ))}\n          </div>\n          <Pagination {...pageContext} />\n        </div>\n        <Media query=\"(max-width: 768px)\">\n          {matches =>\n            !matches && (\n              <div className=\"tag-page__section\">\n                <Img\n                  className=\"tag-page__logo\"\n                  fluid={pick(tag, 'cover.childImageSharp.fluid')}\n                />\n                <div className=\"tag-page__title\">{tag.name}</div>\n                <div className=\"tag-page__desc\">{tag.description}</div>\n                <div className=\"tag-page__links\">\n                  {(tag.links || []).map(link => (\n                    <Link\n                      className=\"tag-page__link\"\n                      key={link.url}\n                      to={link.url}\n                    >\n                      <Icon icon={link.icon} />\n                    </Link>\n                  ))}\n                </div>\n              </div>\n            )\n          }\n        </Media>\n      </div>\n    </Layout>\n  );\n};\n\nexport const query = graphql`\n  query TagPageQuery($posts: [String], $tag: String) {\n    posts: allMarkdownRemark(\n      filter: { id: { in: $posts } }\n      sort: { fields: frontmatter___date, order: DESC }\n    ) {\n      edges {\n        node {\n          ...PostBig\n        }\n      }\n    }\n    tag: tagJson(id: { eq: $tag }) {\n      id\n      name\n      description\n      cover {\n        ... on File {\n          childImageSharp {\n            fluid(cropFocus: CENTER) {\n              ...GatsbyImageSharpFluid\n            }\n          }\n        }\n      }\n      links {\n        icon\n        url\n      }\n    }\n  }\n`;\n"],"sourceRoot":""}